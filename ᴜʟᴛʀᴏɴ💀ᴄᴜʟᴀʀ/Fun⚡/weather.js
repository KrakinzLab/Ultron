// ===============================================================================
// üéÆ·¥ú ü·¥õ Ä·¥è…¥‚Ñ¢ ùòàùò•ùò∑ùò¢ùòØùò§ùò¶ ùòûùò©ùò¢ùòµùò¥ùò¢ùò±ùò± ùòúùò¥ùò¶ùò≥ùò£ùò∞ùòµ ùòûùò™ùòµùò© 80+ ùòäùò∞ùòÆùòÆùò¢ùòØùò•ùò¥ ùòßùò∞ùò≥ ùò£ùò∞ùòµùò© ùòóùò≥ùò™ùò∑ùò¢ùòµùò¶ ùò¢ùòØùò• ùòóùò∂ùò£ùò≠ùò™ùò§..
// ===============================================================================
const { MessageType, Mimetype } = require(`@adiwajshing/baileys`);
const UltronSitreper = require(`../../·¥ú ü·¥õ Ä·¥è…¥/UltronSitreper`);
const ‚ÑìŒπ—îŒ∑—Ç = require("../../·¥ú ü·¥õ Ä·¥è…¥/catch");
const apiKey = UltronSitreper.WAPI;
const https = require(`https`);
// ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ‚ûõ
module.exports = {
  name: `weather`,
  commandType: "Fun‚ö°",
  description: `Get weather data of a city`,
  ·¥ú ü·¥õ Ä·¥è…¥ ç÷Ö Ä…õ: `Obtain weather info by entering the city name.`,
  async handle(œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç, chat, ·¥ú ü·¥õ Ä·¥è…¥, Arc) {
    try {
      const weatherTypes = {
        sunny: `sunny`,
        clear: `clear`,
        cloud: `cloud`,
        overcast: `overcast`,
        rain: `rain`,
        drizzle: `drizzle`,
        snow: `snow`,
        storm: `storm`,
        fog: `fog`,
        haze: `haze`,
        mist: `mist`,
      };
      async function result(imageUrl, weatherDataVariables, downloading) {
        await œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç
          .sendMessage(
            ·¥ú ü·¥õ Ä·¥è…¥.chatId,
            {
              url: imageUrl,
            },
            MessageType.image,
            {
              mimetype: Mimetype.png,
              caption:
                `*Temperature:* {tempInC} ¬∞C | {tempInF} ¬∞F\n*Min Temp:* {minTempInC} ¬∞C | {minTempInF} ¬∞F\n*Max Temp:* {maxTempInC} ¬∞C | {maxTempInF} ¬∞F\n*Humidity:* {humidity}%\n*Wind:* {windSpeedInkmph} kmph | {windSpeedInmph} mph , {degree}¬∞\n*Sunrise:* {sunriseTime}\n*Sunset:* {sunsetTime}\n\n\n*{weatherDescription}*\n{cityName} , {country}\n{dateAndTime}`.format(
                  weatherDataVariables
                ),
              thumbnail: null,
            }
          )
          .catch((error) => ‚ÑìŒπ—îŒ∑—Ç.catch(error, œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç, ·¥ú ü·¥õ Ä·¥è…¥));
      }
      if (Arc.length === 0 || Arc.length < 1) {
        await œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç.sendMessage(·¥ú ü·¥õ Ä·¥è…¥.chatId, "‚ùå", MessageType.text);
        await œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç
          .sendMessage(
            ·¥ú ü·¥õ Ä·¥è…¥.chatId,
            {
              url: `https://i.postimg.cc/MGkpdxHT/ltr-Args.png`,
            },
            MessageType.image,
            {
              mimetype: Mimetype.jpeg,
              caption: `*‚ö†Ô∏èSeems like someone forgot to give Movie/Series name!*

*Usage Example*
.imdb <movie/series>`,
            }
          )
          .catch((error) => ‚ÑìŒπ—îŒ∑—Ç.catch(error, œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç, ·¥ú ü·¥õ Ä·¥è…¥));
        return;
      } else if (
        Arc[Arc.length - 1] === `tom` ||
        Arc[Arc.length - 1] === `tomorrow`
      ) {
        var downloading = await œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç
          .sendMessage(
            ·¥ú ü·¥õ Ä·¥è…¥.chatId,
            `Processing data. Please wait...`,
            MessageType.text
          )
          .catch((error) => ‚ÑìŒπ—îŒ∑—Ç.catch(error, œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç, ·¥ú ü·¥õ Ä·¥è…¥));
        Arc[Arc.length - 1] = ``;
        var cityName = Arc.join(` `);
        const unit = `metric`;

        const url =
          `https://api.openweathermap.org/data/2.5/forecast?q=` +
          cityName +
          `&appid=` +
          apiKey +
          `&units=` +
          unit +
          `&cnt=` +
          8;

        https.get(url, function (response) {
          response.on(`error`, (c·¥á Ä Ä·¥è Ä) => {
            throw c·¥á Ä Ä·¥è Ä;
          });
          response.on(`data`, function (data) {
            try {
              const weatherData = JSON.parse(data);
              const tempInC = Number(weatherData.list[7].main.temp).toFixed(2);
              const tempInF = (tempInC * 1.8 + 32).toFixed(2);
              const minTempInC = Number(
                weatherData.list[7].main.temp_min
              ).toFixed(2);
              const minTempInF = (minTempInC * 1.8 + 32).toFixed(2);
              const maxTempInC = Number(
                weatherData.list[7].main.temp_max
              ).toFixed(2);
              const maxTempInF = (maxTempInC * 1.8 + 32).toFixed(2);

              const humidity = Number(
                weatherData.list[7].main.humidity
              ).toFixed(2);

              const windSpeedInkmph = (
                Number(weatherData.list[7].wind.speed) * 3.6
              ).toFixed(2);
              const windSpeedInmph = (windSpeedInkmph * 0.621371).toFixed(2);
              const windDegree = weatherData.list[7].wind.deg.toFixed(2);

              const sunriseTimeStamp = Number(weatherData.city.sunrise);
              var sunriseDate = new Date(sunriseTimeStamp);
              const sunriseTime =
                sunriseDate.getHours() +
                `:` +
                sunriseDate.getMinutes() +
                `:` +
                sunriseDate.getSeconds();
              const sunsetTimeStamp = Number(weatherData.city.sunset);
              var sunsetDate = new Date(sunsetTimeStamp);
              const sunsetTime =
                sunsetDate.getHours() +
                `:` +
                sunsetDate.getMinutes() +
                `:` +
                sunsetDate.getSeconds();

              var weatherDescription =
                weatherData.list[7].weather[0].description;

              for (var type in weatherTypes) {
                if (weatherDescription.includes(weatherTypes[type])) {
                  imageName = weatherTypes[type];
                  break;
                } else {
                  imageName = `fallback`;
                }
              }
              weatherDescription = weatherDescription.toUpperCase();
              cityName = weatherData.city.name;
              const country = weatherData.city.country;
              const timeOfRequest = weatherData.list[7].dt * 1000;
              var date = new Date(timeOfRequest);

              const dateAndTime =
                date.getDate() +
                `/` +
                (date.getMonth() + 1) +
                `/` +
                date.getFullYear() +
                ` ` +
                date.getHours() +
                `:` +
                date.getMinutes() +
                `:` +
                date.getSeconds();
              const weatherDataVariables = {
                tempInC: tempInC,
                tempInF: tempInF,
                minTempInC: minTempInC,
                minTempInF: minTempInF,
                maxTempInC: maxTempInC,
                maxTempInF,
                maxTempInF,
                humidity: humidity,
                windSpeedInkmph: windSpeedInkmph,
                windSpeedInmph: windSpeedInmph,
                degree: windDegree,
                sunriseTime: sunriseTime,
                sunsetTime: sunsetTime,
                weatherDescription: weatherDescription,
                cityName: cityName,
                country: country,
                dateAndTime: dateAndTime,
              };

              const imageUrl =
                `https://raw.githubusercontent.com/Prince-Mendiratta/·¥ú ü·¥õ Ä·¥è…¥-Resources/main/weather/` +
                imageName +
                `.jpg`;
              result(imageUrl, weatherDataVariables, downloading);
            } catch (c·¥á Ä Ä·¥è Ä) {
              œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç
                .sendMessage(
                  ·¥ú ü·¥õ Ä·¥è…¥.chatId,
                  `Íú±·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢. ú·¥á Ä·¥á ·¥Ä Ä·¥á Íú±·¥è·¥ç·¥á  ü·¥è…¢Íú± Íú±…™…¥·¥Ñ·¥á ·¥° ú·¥á…¥ ·¥õ ú·¥á  ô·¥è·¥õ ·¥°·¥ÄÍú± …¥·¥è·¥õ  Ä·¥áÍú±·¥ò·¥è…¥·¥Ö…™…¥…¢ ·¥ÄÍú± ·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö.
TRY LATER!

‚ö†Ô∏èùóòùóøùóøùóºùóø
‚Ä¢ ${c·¥á Ä Ä·¥è Ä}


üí°ùóñùóºùó∫ùó∫ùóÆùóªùó± ‚Ä¢ ${·¥ú ü·¥õ Ä·¥è…¥.moduleName}
üéÆùóúùòÅ ùòÑùóÆùòÄ ùó£ùó†? ‚Ä¢ ${·¥ú ü·¥õ Ä·¥è…¥.isPm}`,
                  MessageType.text
                )
                .catch((c·¥á Ä Ä·¥è Ä) => {
                  ‚ÑìŒπ—îŒ∑—Ç.catch((c·¥á Ä Ä·¥è Ä, œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç, ·¥ú ü·¥õ Ä·¥è…¥));
                });
              return;
            }
          });
        });
        return;
      } else {
        var downloading = await œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç
          .sendMessage(
            ·¥ú ü·¥õ Ä·¥è…¥.chatId,
            `Processing data. Please wait...`,
            MessageType.text
          )
          .catch((error) => ‚ÑìŒπ—îŒ∑—Ç.catch(error, œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç, ·¥ú ü·¥õ Ä·¥è…¥));
        var cityName = Arc.join(` `);
        const unit = `metric`;

        const url =
          `https://api.openweathermap.org/data/2.5/weather?q=` +
          cityName +
          `&appid=` +
          apiKey +
          `&units=` +
          unit;

        https.get(url, function (response) {
          response.on(`error`, (c·¥á Ä Ä·¥è Ä) => {
            throw c·¥á Ä Ä·¥è Ä;
          });
          response.on(`data`, function (data) {
            try {
              const weatherData = JSON.parse(data);
              const tempInC = Number(weatherData.main.temp).toFixed(2);
              const tempInF = (tempInC * 1.8 + 32).toFixed(2);
              const minTempInC = Number(weatherData.main.temp_min).toFixed(2);
              const minTempInF = (minTempInC * 1.8 + 32).toFixed(2);
              const maxTempInC = Number(weatherData.main.temp_max).toFixed(2);
              const maxTempInF = (maxTempInC * 1.8 + 32).toFixed(2);
              const humidity = Number(weatherData.main.humidity).toFixed(2);
              const windSpeedInkmph = (
                Number(weatherData.wind.speed) * 3.6
              ).toFixed(2);
              const windSpeedInmph = (windSpeedInkmph * 0.621371).toFixed(2);
              const windDegree = weatherData.wind.deg.toFixed(2);
              const sunriseTimeStamp = Number(weatherData.sys.sunrise);
              var sunriseDate = new Date(sunriseTimeStamp);
              const sunriseTime =
                sunriseDate.getHours() +
                `:` +
                sunriseDate.getMinutes() +
                `:` +
                sunriseDate.getSeconds();
              const sunsetTimeStamp = Number(weatherData.sys.sunset);
              var sunsetDate = new Date(sunsetTimeStamp);
              const sunsetTime =
                sunsetDate.getHours() +
                `:` +
                sunsetDate.getMinutes() +
                `:` +
                sunsetDate.getSeconds();
              var weatherDescription = weatherData.weather[0].description;

              for (var type in weatherTypes) {
                if (weatherDescription.includes(weatherTypes[type])) {
                  imageName = weatherTypes[type];
                  break;
                } else {
                  imageName = `fallback`;
                }
              }
              weatherDescription = weatherDescription.toUpperCase();
              cityName = weatherData.name;
              const country = weatherData.sys.country;
              const timeOfRequest = weatherData.dt * 1000;
              var date = new Date(timeOfRequest);

              const dateAndTime =
                date.getDate() +
                `/` +
                (date.getMonth() + 1) +
                `/` +
                date.getFullYear() +
                ` ` +
                date.getHours() +
                `:` +
                date.getMinutes() +
                `:` +
                date.getSeconds();
              const weatherDataVariables = {
                tempInC: tempInC,
                tempInF: tempInF,
                minTempInC: minTempInC,
                minTempInF: minTempInF,
                maxTempInC: maxTempInC,
                maxTempInF,
                maxTempInF,
                humidity: humidity,
                windSpeedInkmph: windSpeedInkmph,
                windSpeedInmph: windSpeedInmph,
                degree: windDegree,
                sunriseTime: sunriseTime,
                sunsetTime: sunsetTime,
                weatherDescription: weatherDescription,
                cityName: cityName,
                country: country,
                dateAndTime: dateAndTime,
              };
              const imageUrl =
                `https://raw.githubusercontent.com/Prince-Mendiratta/·¥ú ü·¥õ Ä·¥è…¥-Resources/main/weather/` +
                imageName +
                `.jpg`;

              result(imageUrl, weatherDataVariables, downloading);
            } catch (c·¥á Ä Ä·¥è Ä) {
              œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç
                .sendMessage(
                  ·¥ú ü·¥õ Ä·¥è…¥.chatId,
                  `*üéÆ·¥ú ü·¥õ Ä·¥è…¥‚Ñ¢* ùêùùê¢ùêùùêß'ùê≠ ùê∞ùê®ùê´ùê§ ùêöùê¨ ùêûùê±ùê©ùêûùêúùê≠ùêûùêù‚ùó

üí°ùóõùó≤ùóøùó≤ ùó∂ùòÄ ùóÆ ùòÄùó∫ùóÆùóπùóπ ùó≤ùóøùóøùóºùóø ùóøùó≤ùóΩùóºùóøùòÅ ùóÆùóªùó± ùòÅùóº ùóπùóºùó¥ ùòÅùóµùó≤ ùóøùó≤ùóΩùóºùóøùòÅ ùòÇùòÄùó≤ ${UltronSitreper.ULTRONIX}ùóøùó≤ùóΩùóºùóøùòÅ
‚ö†Ô∏èùóòùóøùóøùóºùóø
‚Ä¢ ${c·¥á Ä Ä·¥è Ä}`,
                  MessageType.text
                )
                .catch((c·¥á Ä Ä·¥è Ä) => {
                  ‚ÑìŒπ—îŒ∑—Ç.catch((c·¥á Ä Ä·¥è Ä, œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç, ·¥ú ü·¥õ Ä·¥è…¥));
                });
              return;
            }
          });
        });
        return;
      }
    } catch (c·¥á Ä Ä·¥è Ä) {
      œÖ‚Ñì—Ç—èœÉŒ∑‚ÑìŒπ—îŒ∑—Ç.sendMessage(
        ·¥ú ü·¥õ Ä·¥è…¥.chatId,
        `Íú±·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢. ú·¥á Ä·¥á ·¥Ä Ä·¥á Íú±·¥è·¥ç·¥á  ü·¥è…¢Íú± Íú±…™…¥·¥Ñ·¥á ·¥° ú·¥á…¥ ·¥õ ú·¥á  ô·¥è·¥õ ·¥°·¥ÄÍú± …¥·¥è·¥õ  Ä·¥áÍú±·¥ò·¥è…¥·¥Ö…™…¥…¢ ·¥ÄÍú± ·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö.
TRY AGAIN LATER!
‚ö†Ô∏èùóòùóøùóøùóºùóø
‚Ä¢ ${c·¥á Ä Ä·¥è Ä}


üí°ùóñùóºùó∫ùó∫ùóÆùóªùó± ‚Ä¢ ${·¥ú ü·¥õ Ä·¥è…¥.moduleName}
üéÆùóúùòÅ ùòÑùóÆùòÄ ùó£ùó†? ‚Ä¢ ${·¥ú ü·¥õ Ä·¥è…¥.isPm}`,
        MessageType.text
      );
    }
  },
};
// ===============================================================================
// üéÆ·¥ú ü·¥õ Ä·¥è…¥‚Ñ¢ ùòàùò•ùò∑ùò¢ùòØùò§ùò¶ ùòûùò©ùò¢ùòµùò¥ùò¢ùò±ùò± ùòúùò¥ùò¶ùò≥ùò£ùò∞ùòµ ùòûùò™ùòµùò© 80+ ùòäùò∞ùòÆùòÆùò¢ùòØùò•ùò¥ ùòßùò∞ùò≥ ùò£ùò∞ùòµùò© ùòóùò≥ùò™ùò∑ùò¢ùòµùò¶ ùò¢ùòØùò• ùòóùò∂ùò£ùò≠ùò™ùò§..
// ===============================================================================
